# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.create_mdas_recovery_request import CreateMDASRecoveryRequest  # noqa: E501

class TestCreateMDASRecoveryRequest(unittest.TestCase):
    """CreateMDASRecoveryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateMDASRecoveryRequest:
        """Test CreateMDASRecoveryRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateMDASRecoveryRequest`
        """
        model = CreateMDASRecoveryRequest()  # noqa: E501
        if include_optional:
            return CreateMDASRecoveryRequest(
                quality_duration = 56,
                sleep_score = 56,
                is_nap = True,
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_id = 56,
                sleep_id = 56,
                cycle_id = 56,
                recovery_score = 56,
                resting_heart_rate = 56,
                hrv_rmssd = 1.337,
                activity_state = 'pending',
                is_calibrating = True,
                prod_covid = 1.337,
                hr_baseline = 1.337,
                skin_temp_celsius = 1.337,
                spo2 = 1.337,
                algo_version = '',
                rhr_component = 1.337,
                hrv_component = 1.337,
                is_normal = True,
                history_size = 1.337,
                recovery_rate = 1.337,
                kilojoules = 1.337,
                during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                    lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                timezone_offset = '',
                timezone = '',
                survey_response_id = 56,
                percent_recorded = 1.337,
                is_responded = True,
                activity_source = 'auto',
                score = 56,
                latency = 56,
                is_significant = True,
                debt_pre = 1.337,
                debt_post = 1.337,
                need_from_strain = 1.337,
                sleep_need = 1.337,
                habitual_sleep_need = 1.337,
                disturbances = 1.337,
                time_in_bed = 1.337,
                light_sleep_duration = 56,
                slow_wave_sleep_duration = 56,
                rem_sleep_duration = 56,
                cycles_count = 56,
                wake_duration = 56,
                arousal_time = 1.337,
                no_data_duration = 56,
                in_sleep_efficiency = 1.337,
                credit_from_naps = 1.337,
                respiratory_rate = 1.337,
                sleep_consistency = 1.337,
                projected_score = 1.337,
                projected_sleep = 1.337,
                optimal_sleep_times = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                    lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                recovery_id = 56
            )
        else:
            return CreateMDASRecoveryRequest(
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_id = 56,
                sleep_id = 56,
                during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                    lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                score = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                recovery_id = 56,
        )
        """

    def testCreateMDASRecoveryRequest(self):
        """Test CreateMDASRecoveryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
