# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.models_api_v1_cycles_requests_update_mdas_cycle_request import ModelsApiV1CyclesRequestsUpdateMDASCycleRequest  # noqa: E501

class TestModelsApiV1CyclesRequestsUpdateMDASCycleRequest(unittest.TestCase):
    """ModelsApiV1CyclesRequestsUpdateMDASCycleRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelsApiV1CyclesRequestsUpdateMDASCycleRequest:
        """Test ModelsApiV1CyclesRequestsUpdateMDASCycleRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelsApiV1CyclesRequestsUpdateMDASCycleRequest`
        """
        model = ModelsApiV1CyclesRequestsUpdateMDASCycleRequest()  # noqa: E501
        if include_optional:
            return ModelsApiV1CyclesRequestsUpdateMDASCycleRequest(
                scaled_strain = 1.337,
                during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                    lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                predicted_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                timezone_offset = '',
                days = openapi_client.models.date_range.DateRange(
                    lower = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    upper = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                data_state = 'pending',
                day_strain = 1.337,
                day_kilojoules = 1.337,
                day_avg_heart_rate = 56,
                day_max_heart_rate = 56,
                user_id = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ModelsApiV1CyclesRequestsUpdateMDASCycleRequest(
                during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                    lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                timezone_offset = '',
                days = openapi_client.models.date_range.DateRange(
                    lower = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    upper = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    lower_bound_type = null, 
                    upper_bound_type = null, ),
                data_state = 'pending',
                user_id = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testModelsApiV1CyclesRequestsUpdateMDASCycleRequest(self):
        """Test ModelsApiV1CyclesRequestsUpdateMDASCycleRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
