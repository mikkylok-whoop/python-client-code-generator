# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.batch_create_mdas_activities_request import BatchCreateMDASActivitiesRequest  # noqa: E501

class TestBatchCreateMDASActivitiesRequest(unittest.TestCase):
    """BatchCreateMDASActivitiesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchCreateMDASActivitiesRequest:
        """Test BatchCreateMDASActivitiesRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchCreateMDASActivitiesRequest`
        """
        model = BatchCreateMDASActivitiesRequest()  # noqa: E501
        if include_optional:
            return BatchCreateMDASActivitiesRequest(
                activities = [
                    openapi_client.models.create_mdas_activity_request.CreateMDASActivityRequest(
                        activity_v1_id = 56, 
                        version = 56, 
                        cycle_id = 56, 
                        score_type = 'RECOVERY', 
                        user_id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        timezone = '', 
                        timezone_offset = '', 
                        activity_source = 'auto', 
                        score_state = 'pending', 
                        activity_type = '', 
                        source_id = '', 
                        gps_enabled = True, 
                        during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                            lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            lower_bound_type = null, 
                            upper_bound_type = null, ), 
                        activity_id = '', )
                    ]
            )
        else:
            return BatchCreateMDASActivitiesRequest(
                activities = [
                    openapi_client.models.create_mdas_activity_request.CreateMDASActivityRequest(
                        activity_v1_id = 56, 
                        version = 56, 
                        cycle_id = 56, 
                        score_type = 'RECOVERY', 
                        user_id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        timezone = '', 
                        timezone_offset = '', 
                        activity_source = 'auto', 
                        score_state = 'pending', 
                        activity_type = '', 
                        source_id = '', 
                        gps_enabled = True, 
                        during = openapi_client.models.date_time_tz_range.DateTimeTzRange(
                            lower = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            upper = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            lower_bound_type = null, 
                            upper_bound_type = null, ), 
                        activity_id = '', )
                    ],
        )
        """

    def testBatchCreateMDASActivitiesRequest(self):
        """Test BatchCreateMDASActivitiesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
