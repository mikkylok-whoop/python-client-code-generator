# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.models_api_v2_cycles_responses_mdas_cycle import ModelsApiV2CyclesResponsesMDASCycle  # noqa: E501

class TestModelsApiV2CyclesResponsesMDASCycle(unittest.TestCase):
    """ModelsApiV2CyclesResponsesMDASCycle unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelsApiV2CyclesResponsesMDASCycle:
        """Test ModelsApiV2CyclesResponsesMDASCycle
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelsApiV2CyclesResponsesMDASCycle`
        """
        model = ModelsApiV2CyclesResponsesMDASCycle()  # noqa: E501
        if include_optional:
            return ModelsApiV2CyclesResponsesMDASCycle(
                cycle_id = 56,
                user_id = 56,
                start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                sleep_need = 56,
                predicted_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                timezone_offset = '',
                start_day = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_day = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                intensity_score = 1.337,
                data_state = 'pending',
                day_strain = 1.337,
                day_kilojoules = 1.337,
                day_avg_heart_rate = 56,
                day_max_heart_rate = 56,
                scaled_strain = 1.337,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ModelsApiV2CyclesResponsesMDASCycle(
                cycle_id = 56,
                user_id = 56,
                start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                predicted_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                timezone_offset = '',
                start_day = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_day = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                data_state = 'pending',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testModelsApiV2CyclesResponsesMDASCycle(self):
        """Test ModelsApiV2CyclesResponsesMDASCycle"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
