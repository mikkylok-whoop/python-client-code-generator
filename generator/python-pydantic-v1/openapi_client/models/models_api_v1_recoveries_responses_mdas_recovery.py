# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from openapi_client.models.activity_source import ActivitySource
from openapi_client.models.activity_state import ActivityState
from openapi_client.models.date_time_tz_range import DateTimeTzRange

class ModelsApiV1RecoveriesResponsesMDASRecovery(BaseModel):
    """
    All models should inherit from this. If they have special serialization concerns, they can override Config.  >>> class FunTime(WhoopModel): ...     name: str ...     start_time: datetime.datetime ... >>> d = { ... \"name\": \"yay\", ... \"start_time\": datetime.datetime(2020, 1, 1, hour=0, tzinfo=datetime.timezone.utc), ... \"extraBadField\": 3 ... } >>> FunTime(**d).json() '{\"name\": \"yay\", \"start_time\": \"2020-01-01T00:00:00.000+00:00\"}'  # noqa: E501
    """
    recovery_id: StrictInt = Field(...)
    quality_duration: Optional[StrictInt] = None
    sleep_score: Optional[StrictInt] = None
    is_nap: Optional[StrictBool] = None
    var_date: datetime = Field(default=..., alias="date")
    user_id: StrictInt = Field(...)
    sleep_id: StrictInt = Field(...)
    cycle_id: Optional[StrictInt] = None
    recovery_score: Optional[StrictInt] = None
    resting_heart_rate: Optional[StrictInt] = None
    hrv_rmssd: Optional[Union[StrictFloat, StrictInt]] = None
    activity_state: Optional[ActivityState] = None
    is_calibrating: Optional[StrictBool] = None
    prod_covid: Optional[Union[StrictFloat, StrictInt]] = None
    hr_baseline: Optional[Union[StrictFloat, StrictInt]] = None
    skin_temp_celsius: Optional[Union[StrictFloat, StrictInt]] = None
    spo2: Optional[Union[StrictFloat, StrictInt]] = None
    algo_version: Optional[StrictStr] = None
    rhr_component: Optional[Union[StrictFloat, StrictInt]] = None
    hrv_component: Optional[Union[StrictFloat, StrictInt]] = None
    is_normal: Optional[StrictBool] = None
    history_size: Optional[Union[StrictFloat, StrictInt]] = None
    recovery_rate: Optional[Union[StrictFloat, StrictInt]] = None
    kilojoules: Optional[Union[StrictFloat, StrictInt]] = None
    during: DateTimeTzRange = Field(...)
    timezone_offset: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    survey_response_id: Optional[StrictInt] = None
    percent_recorded: Optional[Union[StrictFloat, StrictInt]] = None
    is_responded: Optional[StrictBool] = None
    activity_source: Optional[ActivitySource] = None
    score: StrictInt = Field(...)
    latency: Optional[StrictInt] = None
    is_significant: Optional[StrictBool] = None
    debt_pre: Optional[Union[StrictFloat, StrictInt]] = None
    debt_post: Optional[Union[StrictFloat, StrictInt]] = None
    need_from_strain: Optional[Union[StrictFloat, StrictInt]] = None
    sleep_need: Optional[Union[StrictFloat, StrictInt]] = None
    habitual_sleep_need: Optional[Union[StrictFloat, StrictInt]] = None
    disturbances: Optional[Union[StrictFloat, StrictInt]] = None
    time_in_bed: Optional[Union[StrictFloat, StrictInt]] = None
    light_sleep_duration: Optional[StrictInt] = None
    slow_wave_sleep_duration: Optional[StrictInt] = None
    rem_sleep_duration: Optional[StrictInt] = None
    cycles_count: Optional[StrictInt] = None
    wake_duration: Optional[StrictInt] = None
    arousal_time: Optional[Union[StrictFloat, StrictInt]] = None
    no_data_duration: Optional[StrictInt] = None
    in_sleep_efficiency: Optional[Union[StrictFloat, StrictInt]] = None
    credit_from_naps: Optional[Union[StrictFloat, StrictInt]] = None
    respiratory_rate: Optional[Union[StrictFloat, StrictInt]] = None
    sleep_consistency: Optional[Union[StrictFloat, StrictInt]] = None
    projected_score: Optional[Union[StrictFloat, StrictInt]] = None
    projected_sleep: Optional[Union[StrictFloat, StrictInt]] = None
    optimal_sleep_times: Optional[DateTimeTzRange] = None
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    __properties = ["recovery_id", "quality_duration", "sleep_score", "is_nap", "date", "user_id", "sleep_id", "cycle_id", "recovery_score", "resting_heart_rate", "hrv_rmssd", "activity_state", "is_calibrating", "prod_covid", "hr_baseline", "skin_temp_celsius", "spo2", "algo_version", "rhr_component", "hrv_component", "is_normal", "history_size", "recovery_rate", "kilojoules", "during", "timezone_offset", "timezone", "survey_response_id", "percent_recorded", "is_responded", "activity_source", "score", "latency", "is_significant", "debt_pre", "debt_post", "need_from_strain", "sleep_need", "habitual_sleep_need", "disturbances", "time_in_bed", "light_sleep_duration", "slow_wave_sleep_duration", "rem_sleep_duration", "cycles_count", "wake_duration", "arousal_time", "no_data_duration", "in_sleep_efficiency", "credit_from_naps", "respiratory_rate", "sleep_consistency", "projected_score", "projected_sleep", "optimal_sleep_times", "created_at", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelsApiV1RecoveriesResponsesMDASRecovery:
        """Create an instance of ModelsApiV1RecoveriesResponsesMDASRecovery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of during
        if self.during:
            _dict['during'] = self.during.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optimal_sleep_times
        if self.optimal_sleep_times:
            _dict['optimal_sleep_times'] = self.optimal_sleep_times.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelsApiV1RecoveriesResponsesMDASRecovery:
        """Create an instance of ModelsApiV1RecoveriesResponsesMDASRecovery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelsApiV1RecoveriesResponsesMDASRecovery.parse_obj(obj)

        _obj = ModelsApiV1RecoveriesResponsesMDASRecovery.parse_obj({
            "recovery_id": obj.get("recovery_id"),
            "quality_duration": obj.get("quality_duration"),
            "sleep_score": obj.get("sleep_score"),
            "is_nap": obj.get("is_nap"),
            "var_date": obj.get("date"),
            "user_id": obj.get("user_id"),
            "sleep_id": obj.get("sleep_id"),
            "cycle_id": obj.get("cycle_id"),
            "recovery_score": obj.get("recovery_score"),
            "resting_heart_rate": obj.get("resting_heart_rate"),
            "hrv_rmssd": obj.get("hrv_rmssd"),
            "activity_state": obj.get("activity_state"),
            "is_calibrating": obj.get("is_calibrating"),
            "prod_covid": obj.get("prod_covid"),
            "hr_baseline": obj.get("hr_baseline"),
            "skin_temp_celsius": obj.get("skin_temp_celsius"),
            "spo2": obj.get("spo2"),
            "algo_version": obj.get("algo_version"),
            "rhr_component": obj.get("rhr_component"),
            "hrv_component": obj.get("hrv_component"),
            "is_normal": obj.get("is_normal"),
            "history_size": obj.get("history_size"),
            "recovery_rate": obj.get("recovery_rate"),
            "kilojoules": obj.get("kilojoules"),
            "during": DateTimeTzRange.from_dict(obj.get("during")) if obj.get("during") is not None else None,
            "timezone_offset": obj.get("timezone_offset"),
            "timezone": obj.get("timezone"),
            "survey_response_id": obj.get("survey_response_id"),
            "percent_recorded": obj.get("percent_recorded"),
            "is_responded": obj.get("is_responded"),
            "activity_source": obj.get("activity_source"),
            "score": obj.get("score"),
            "latency": obj.get("latency"),
            "is_significant": obj.get("is_significant"),
            "debt_pre": obj.get("debt_pre"),
            "debt_post": obj.get("debt_post"),
            "need_from_strain": obj.get("need_from_strain"),
            "sleep_need": obj.get("sleep_need"),
            "habitual_sleep_need": obj.get("habitual_sleep_need"),
            "disturbances": obj.get("disturbances"),
            "time_in_bed": obj.get("time_in_bed"),
            "light_sleep_duration": obj.get("light_sleep_duration"),
            "slow_wave_sleep_duration": obj.get("slow_wave_sleep_duration"),
            "rem_sleep_duration": obj.get("rem_sleep_duration"),
            "cycles_count": obj.get("cycles_count"),
            "wake_duration": obj.get("wake_duration"),
            "arousal_time": obj.get("arousal_time"),
            "no_data_duration": obj.get("no_data_duration"),
            "in_sleep_efficiency": obj.get("in_sleep_efficiency"),
            "credit_from_naps": obj.get("credit_from_naps"),
            "respiratory_rate": obj.get("respiratory_rate"),
            "sleep_consistency": obj.get("sleep_consistency"),
            "projected_score": obj.get("projected_score"),
            "projected_sleep": obj.get("projected_sleep"),
            "optimal_sleep_times": DateTimeTzRange.from_dict(obj.get("optimal_sleep_times")) if obj.get("optimal_sleep_times") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


