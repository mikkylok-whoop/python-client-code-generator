# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.activity_source import ActivitySource
from openapi_client.models.date_time_tz_range import DateTimeTzRange
from openapi_client.models.score_state import ScoreState
from openapi_client.models.score_type import ScoreType

class ModelsApiV1ActivitiesResponsesMDASActivity(BaseModel):
    """
    All models should inherit from this. If they have special serialization concerns, they can override Config.  >>> class FunTime(WhoopModel): ...     name: str ...     start_time: datetime.datetime ... >>> d = { ... \"name\": \"yay\", ... \"start_time\": datetime.datetime(2020, 1, 1, hour=0, tzinfo=datetime.timezone.utc), ... \"extraBadField\": 3 ... } >>> FunTime(**d).json() '{\"name\": \"yay\", \"start_time\": \"2020-01-01T00:00:00.000+00:00\"}'  # noqa: E501
    """
    activity_id: StrictStr = Field(...)
    activity_v1_id: StrictInt = Field(...)
    version: StrictInt = Field(...)
    cycle_id: StrictInt = Field(...)
    score_type: ScoreType = Field(...)
    user_id: StrictInt = Field(...)
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    timezone: Optional[StrictStr] = None
    timezone_offset: Optional[StrictStr] = None
    activity_source: Optional[ActivitySource] = None
    score_state: ScoreState = Field(...)
    activity_type: StrictStr = Field(...)
    source_id: Optional[StrictStr] = None
    gps_enabled: Optional[StrictBool] = None
    during: DateTimeTzRange = Field(...)
    __properties = ["activity_id", "activity_v1_id", "version", "cycle_id", "score_type", "user_id", "created_at", "updated_at", "timezone", "timezone_offset", "activity_source", "score_state", "activity_type", "source_id", "gps_enabled", "during"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelsApiV1ActivitiesResponsesMDASActivity:
        """Create an instance of ModelsApiV1ActivitiesResponsesMDASActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of during
        if self.during:
            _dict['during'] = self.during.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelsApiV1ActivitiesResponsesMDASActivity:
        """Create an instance of ModelsApiV1ActivitiesResponsesMDASActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelsApiV1ActivitiesResponsesMDASActivity.parse_obj(obj)

        _obj = ModelsApiV1ActivitiesResponsesMDASActivity.parse_obj({
            "activity_id": obj.get("activity_id"),
            "activity_v1_id": obj.get("activity_v1_id"),
            "version": obj.get("version"),
            "cycle_id": obj.get("cycle_id"),
            "score_type": obj.get("score_type"),
            "user_id": obj.get("user_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "timezone": obj.get("timezone"),
            "timezone_offset": obj.get("timezone_offset"),
            "activity_source": obj.get("activity_source"),
            "score_state": obj.get("score_state"),
            "activity_type": obj.get("activity_type"),
            "source_id": obj.get("source_id"),
            "gps_enabled": obj.get("gps_enabled"),
            "during": DateTimeTzRange.from_dict(obj.get("during")) if obj.get("during") is not None else None
        })
        return _obj


