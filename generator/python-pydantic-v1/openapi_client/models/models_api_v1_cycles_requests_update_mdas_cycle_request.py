# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.cycle_state import CycleState
from openapi_client.models.date_range import DateRange
from openapi_client.models.date_time_tz_range import DateTimeTzRange

class ModelsApiV1CyclesRequestsUpdateMDASCycleRequest(BaseModel):
    """
    All models should inherit from this. If they have special serialization concerns, they can override Config.  >>> class FunTime(WhoopModel): ...     name: str ...     start_time: datetime.datetime ... >>> d = { ... \"name\": \"yay\", ... \"start_time\": datetime.datetime(2020, 1, 1, hour=0, tzinfo=datetime.timezone.utc), ... \"extraBadField\": 3 ... } >>> FunTime(**d).json() '{\"name\": \"yay\", \"start_time\": \"2020-01-01T00:00:00.000+00:00\"}'  # noqa: E501
    """
    scaled_strain: Optional[Union[StrictFloat, StrictInt]] = None
    during: DateTimeTzRange = Field(...)
    predicted_end: Optional[datetime] = None
    timezone_offset: StrictStr = Field(...)
    days: DateRange = Field(...)
    data_state: CycleState = Field(...)
    day_strain: Optional[Union[StrictFloat, StrictInt]] = None
    day_kilojoules: Optional[Union[StrictFloat, StrictInt]] = None
    day_avg_heart_rate: Optional[StrictInt] = None
    day_max_heart_rate: Optional[StrictInt] = None
    user_id: StrictInt = Field(...)
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    __properties = ["scaled_strain", "during", "predicted_end", "timezone_offset", "days", "data_state", "day_strain", "day_kilojoules", "day_avg_heart_rate", "day_max_heart_rate", "user_id", "created_at", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelsApiV1CyclesRequestsUpdateMDASCycleRequest:
        """Create an instance of ModelsApiV1CyclesRequestsUpdateMDASCycleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of during
        if self.during:
            _dict['during'] = self.during.to_dict()
        # override the default output from pydantic by calling `to_dict()` of days
        if self.days:
            _dict['days'] = self.days.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelsApiV1CyclesRequestsUpdateMDASCycleRequest:
        """Create an instance of ModelsApiV1CyclesRequestsUpdateMDASCycleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelsApiV1CyclesRequestsUpdateMDASCycleRequest.parse_obj(obj)

        _obj = ModelsApiV1CyclesRequestsUpdateMDASCycleRequest.parse_obj({
            "scaled_strain": obj.get("scaled_strain"),
            "during": DateTimeTzRange.from_dict(obj.get("during")) if obj.get("during") is not None else None,
            "predicted_end": obj.get("predicted_end"),
            "timezone_offset": obj.get("timezone_offset"),
            "days": DateRange.from_dict(obj.get("days")) if obj.get("days") is not None else None,
            "data_state": obj.get("data_state"),
            "day_strain": obj.get("day_strain"),
            "day_kilojoules": obj.get("day_kilojoules"),
            "day_avg_heart_rate": obj.get("day_avg_heart_rate"),
            "day_max_heart_rate": obj.get("day_max_heart_rate"),
            "user_id": obj.get("user_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


