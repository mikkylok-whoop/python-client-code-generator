# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.models_api_v1_activities_requests_create_mdas_activity_request import ModelsApiV1ActivitiesRequestsCreateMDASActivityRequest

class BatchCreateMDASActivitiesRequest(BaseModel):
    """
    All models should inherit from this. If they have special serialization concerns, they can override Config.  >>> class FunTime(WhoopModel): ...     name: str ...     start_time: datetime.datetime ... >>> d = { ... \"name\": \"yay\", ... \"start_time\": datetime.datetime(2020, 1, 1, hour=0, tzinfo=datetime.timezone.utc), ... \"extraBadField\": 3 ... } >>> FunTime(**d).json() '{\"name\": \"yay\", \"start_time\": \"2020-01-01T00:00:00.000+00:00\"}'  # noqa: E501
    """
    activities: conlist(ModelsApiV1ActivitiesRequestsCreateMDASActivityRequest) = Field(...)
    __properties = ["activities"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BatchCreateMDASActivitiesRequest:
        """Create an instance of BatchCreateMDASActivitiesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in activities (list)
        _items = []
        if self.activities:
            for _item in self.activities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BatchCreateMDASActivitiesRequest:
        """Create an instance of BatchCreateMDASActivitiesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BatchCreateMDASActivitiesRequest.parse_obj(obj)

        _obj = BatchCreateMDASActivitiesRequest.parse_obj({
            "activities": [ModelsApiV1ActivitiesRequestsCreateMDASActivityRequest.from_dict(_item) for _item in obj.get("activities")] if obj.get("activities") is not None else None
        })
        return _obj


