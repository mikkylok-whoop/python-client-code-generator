# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel
from openapi_client.models.bound_type import BoundType

class DateRange(BaseModel):
    """
    This exists and is weird because we have APIs that return ranges as semantic strings, which work with Postgres range types.  For instance, the `during` field in the cycle model is given as  \"['2020-08-17T03:42:01.160Z','2020-08-17T12:16:29.582Z')\"  This model makes it so that you can deserialize fields of this type from those strings. When this class is serialized, the strings will be the same.  I would made this Generic, but Pydantic doesn't work with Generics + Python < 3.7, so this base class has upper and lower bounds of type `Any`. Subclasses can override the `upper` and `lower` fields with more specific types, but the elements will be deserialized using the WhoopModel.Config by default.  # noqa: E501
    """
    lower: Optional[date] = None
    upper: Optional[date] = None
    lower_bound_type: Optional[BoundType] = None
    upper_bound_type: Optional[BoundType] = None
    __properties = ["lower", "upper", "lower_bound_type", "upper_bound_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateRange:
        """Create an instance of DateRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateRange:
        """Create an instance of DateRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DateRange.parse_obj(obj)

        _obj = DateRange.parse_obj({
            "lower": obj.get("lower"),
            "upper": obj.get("upper"),
            "lower_bound_type": obj.get("lower_bound_type"),
            "upper_bound_type": obj.get("upper_bound_type")
        })
        return _obj


