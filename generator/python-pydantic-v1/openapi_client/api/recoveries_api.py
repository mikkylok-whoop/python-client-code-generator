# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from datetime import datetime

from pydantic import StrictInt, StrictStr

from typing import Any, List

from openapi_client.models.batch_create_mdas_recoveries_request import BatchCreateMDASRecoveriesRequest
from openapi_client.models.create_mdas_recovery_request import CreateMDASRecoveryRequest
from openapi_client.models.create_mdas_recovery_request_v2 import CreateMDASRecoveryRequestV2
from openapi_client.models.models_api_v1_recoveries_responses_mdas_recovery import ModelsApiV1RecoveriesResponsesMDASRecovery
from openapi_client.models.models_api_v2_recoveries_responses_mdas_recovery import ModelsApiV2RecoveriesResponsesMDASRecovery
from openapi_client.models.update_mdas_recovery_request import UpdateMDASRecoveryRequest
from openapi_client.models.update_mdas_recovery_request_v2 import UpdateMDASRecoveryRequestV2

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RecoveriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post(self, batch_create_mdas_recoveries_request : BatchCreateMDASRecoveriesRequest, **kwargs) -> object:  # noqa: E501
        """Batch Create Recoveries  # noqa: E501

        POST endpoint to create multiple recovery events Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     batch_create_recoveries_request: Multiple recovery events     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post(batch_create_mdas_recoveries_request, async_req=True)
        >>> result = thread.get()

        :param batch_create_mdas_recoveries_request: (required)
        :type batch_create_mdas_recoveries_request: BatchCreateMDASRecoveriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post_with_http_info(batch_create_mdas_recoveries_request, **kwargs)  # noqa: E501

    @validate_arguments
    def batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post_with_http_info(self, batch_create_mdas_recoveries_request : BatchCreateMDASRecoveriesRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Create Recoveries  # noqa: E501

        POST endpoint to create multiple recovery events Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     batch_create_recoveries_request: Multiple recovery events     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post_with_http_info(batch_create_mdas_recoveries_request, async_req=True)
        >>> result = thread.get()

        :param batch_create_mdas_recoveries_request: (required)
        :type batch_create_mdas_recoveries_request: BatchCreateMDASRecoveriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'batch_create_mdas_recoveries_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_create_recoveries_data_sci_mdas_v1_recoveries_batch_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['batch_create_mdas_recoveries_request'] is not None:
            _body_params = _params['batch_create_mdas_recoveries_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v1/recoveries/batch', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_recovery_data_sci_mdas_v1_recoveries_post(self, create_mdas_recovery_request : CreateMDASRecoveryRequest, **kwargs) -> object:  # noqa: E501
        """Create Recovery  # noqa: E501

        POST endpoint to create a new recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     create_recovery_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_recovery_data_sci_mdas_v1_recoveries_post(create_mdas_recovery_request, async_req=True)
        >>> result = thread.get()

        :param create_mdas_recovery_request: (required)
        :type create_mdas_recovery_request: CreateMDASRecoveryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_recovery_data_sci_mdas_v1_recoveries_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_recovery_data_sci_mdas_v1_recoveries_post_with_http_info(create_mdas_recovery_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_recovery_data_sci_mdas_v1_recoveries_post_with_http_info(self, create_mdas_recovery_request : CreateMDASRecoveryRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Recovery  # noqa: E501

        POST endpoint to create a new recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     create_recovery_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_recovery_data_sci_mdas_v1_recoveries_post_with_http_info(create_mdas_recovery_request, async_req=True)
        >>> result = thread.get()

        :param create_mdas_recovery_request: (required)
        :type create_mdas_recovery_request: CreateMDASRecoveryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_mdas_recovery_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_recovery_data_sci_mdas_v1_recoveries_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_mdas_recovery_request'] is not None:
            _body_params = _params['create_mdas_recovery_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v1/recoveries', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_recovery_data_sci_mdas_v2_recoveries_post(self, create_mdas_recovery_request_v2 : CreateMDASRecoveryRequestV2, **kwargs) -> object:  # noqa: E501
        """Create Recovery  # noqa: E501

        POST endpoint to create a new recovery event Args:     create_recovery_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_recovery_data_sci_mdas_v2_recoveries_post(create_mdas_recovery_request_v2, async_req=True)
        >>> result = thread.get()

        :param create_mdas_recovery_request_v2: (required)
        :type create_mdas_recovery_request_v2: CreateMDASRecoveryRequestV2
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_recovery_data_sci_mdas_v2_recoveries_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_recovery_data_sci_mdas_v2_recoveries_post_with_http_info(create_mdas_recovery_request_v2, **kwargs)  # noqa: E501

    @validate_arguments
    def create_recovery_data_sci_mdas_v2_recoveries_post_with_http_info(self, create_mdas_recovery_request_v2 : CreateMDASRecoveryRequestV2, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Recovery  # noqa: E501

        POST endpoint to create a new recovery event Args:     create_recovery_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_recovery_data_sci_mdas_v2_recoveries_post_with_http_info(create_mdas_recovery_request_v2, async_req=True)
        >>> result = thread.get()

        :param create_mdas_recovery_request_v2: (required)
        :type create_mdas_recovery_request_v2: CreateMDASRecoveryRequestV2
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_mdas_recovery_request_v2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_recovery_data_sci_mdas_v2_recoveries_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_mdas_recovery_request_v2'] is not None:
            _body_params = _params['create_mdas_recovery_request_v2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v2/recoveries', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete(self, recovery_id : StrictInt, **kwargs) -> object:  # noqa: E501
        """Delete Recovery  # noqa: E501

        DELETE endpoint to delete a recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     recovery_id: ID of the recovery event     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete(recovery_id, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete_with_http_info(recovery_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete_with_http_info(self, recovery_id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Recovery  # noqa: E501

        DELETE endpoint to delete a recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     recovery_id: ID of the recovery event     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete_with_http_info(recovery_id, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'recovery_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_recovery_data_sci_mdas_v1_recoveries_recovery_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['recovery_id'] is not None:
            _path_params['recovery_id'] = _params['recovery_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v1/recoveries/{recovery_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete(self, recovery_id : StrictStr, **kwargs) -> object:  # noqa: E501
        """Delete Recovery  # noqa: E501

        DELETE endpoint to delete a recovery event Args:     recovery_id: ID of the recovery event     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete(recovery_id, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete_with_http_info(recovery_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete_with_http_info(self, recovery_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Recovery  # noqa: E501

        DELETE endpoint to delete a recovery event Args:     recovery_id: ID of the recovery event     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete_with_http_info(recovery_id, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'recovery_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_recovery_data_sci_mdas_v2_recoveries_recovery_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['recovery_id'] is not None:
            _path_params['recovery_id'] = _params['recovery_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v2/recoveries/{recovery_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get(self, user_id : StrictInt, start : datetime, end : datetime, **kwargs) -> List[ModelsApiV1RecoveriesResponsesMDASRecovery]:  # noqa: E501
        """Get Recoveries In Range For User  # noqa: E501

        GET endpoint to retrieve all recovery events for user during a specified time range Args:     user_id: ID of the user     start: Start of time range to get recovery events for     end: End of time range to get recovery events for     recoveries_dao: RecoveriesDAO instance  Returns: List of recovery event data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get(user_id, start, end, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: int
        :param start: (required)
        :type start: datetime
        :param end: (required)
        :type end: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ModelsApiV1RecoveriesResponsesMDASRecovery]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get_with_http_info(user_id, start, end, **kwargs)  # noqa: E501

    @validate_arguments
    def get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get_with_http_info(self, user_id : StrictInt, start : datetime, end : datetime, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Recoveries In Range For User  # noqa: E501

        GET endpoint to retrieve all recovery events for user during a specified time range Args:     user_id: ID of the user     start: Start of time range to get recovery events for     end: End of time range to get recovery events for     recoveries_dao: RecoveriesDAO instance  Returns: List of recovery event data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get_with_http_info(user_id, start, end, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: int
        :param start: (required)
        :type start: datetime
        :param end: (required)
        :type end: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ModelsApiV1RecoveriesResponsesMDASRecovery], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'start',
            'end'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recoveries_in_range_for_user_data_sci_mdas_v1_recoveries_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        if _params.get('start') is not None:  # noqa: E501
            if isinstance(_params['start'], datetime):
                _query_params.append(('start', _params['start'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start', _params['start']))

        if _params.get('end') is not None:  # noqa: E501
            if isinstance(_params['end'], datetime):
                _query_params.append(('end', _params['end'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end', _params['end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[ModelsApiV1RecoveriesResponsesMDASRecovery]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v1/recoveries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get(self, user_id : StrictInt, start : datetime, end : datetime, **kwargs) -> List[ModelsApiV2RecoveriesResponsesMDASRecovery]:  # noqa: E501
        """Get Recoveries In Range For User  # noqa: E501

        GET endpoint to retrieve all recovery events for user during a specified time range Args:     user_id: ID of the user     start: Start of time range to get recovery events for     end: End of time range to get recovery events for     recoveries_dao: RecoveriesDAO instance  Returns: List of recovery event data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get(user_id, start, end, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: int
        :param start: (required)
        :type start: datetime
        :param end: (required)
        :type end: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ModelsApiV2RecoveriesResponsesMDASRecovery]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get_with_http_info(user_id, start, end, **kwargs)  # noqa: E501

    @validate_arguments
    def get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get_with_http_info(self, user_id : StrictInt, start : datetime, end : datetime, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Recoveries In Range For User  # noqa: E501

        GET endpoint to retrieve all recovery events for user during a specified time range Args:     user_id: ID of the user     start: Start of time range to get recovery events for     end: End of time range to get recovery events for     recoveries_dao: RecoveriesDAO instance  Returns: List of recovery event data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get_with_http_info(user_id, start, end, async_req=True)
        >>> result = thread.get()

        :param user_id: (required)
        :type user_id: int
        :param start: (required)
        :type start: datetime
        :param end: (required)
        :type end: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ModelsApiV2RecoveriesResponsesMDASRecovery], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'start',
            'end'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recoveries_in_range_for_user_data_sci_mdas_v2_recoveries_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        if _params.get('start') is not None:  # noqa: E501
            if isinstance(_params['start'], datetime):
                _query_params.append(('start', _params['start'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start', _params['start']))

        if _params.get('end') is not None:  # noqa: E501
            if isinstance(_params['end'], datetime):
                _query_params.append(('end', _params['end'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end', _params['end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[ModelsApiV2RecoveriesResponsesMDASRecovery]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v2/recoveries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put(self, recovery_id : StrictInt, update_mdas_recovery_request : UpdateMDASRecoveryRequest, **kwargs) -> object:  # noqa: E501
        """Update Recovery  # noqa: E501

        PUT endpoint for updating an existing recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     recovery_id: ID of the recovery event     update_recoveries_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put(recovery_id, update_mdas_recovery_request, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: int
        :param update_mdas_recovery_request: (required)
        :type update_mdas_recovery_request: UpdateMDASRecoveryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put_with_http_info(recovery_id, update_mdas_recovery_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put_with_http_info(self, recovery_id : StrictInt, update_mdas_recovery_request : UpdateMDASRecoveryRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Recovery  # noqa: E501

        PUT endpoint for updating an existing recovery event Note: This endpoint is for internal application use only. External customers should use the GET endpoints instead.  Args:     recovery_id: ID of the recovery event     update_recoveries_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put_with_http_info(recovery_id, update_mdas_recovery_request, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: int
        :param update_mdas_recovery_request: (required)
        :type update_mdas_recovery_request: UpdateMDASRecoveryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'recovery_id',
            'update_mdas_recovery_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_recovery_data_sci_mdas_v1_recoveries_recovery_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['recovery_id'] is not None:
            _path_params['recovery_id'] = _params['recovery_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_mdas_recovery_request'] is not None:
            _body_params = _params['update_mdas_recovery_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v1/recoveries/{recovery_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put(self, recovery_id : StrictStr, update_mdas_recovery_request_v2 : UpdateMDASRecoveryRequestV2, **kwargs) -> object:  # noqa: E501
        """Update Recovery  # noqa: E501

        PUT endpoint for updating an existing recovery event Args:     recovery_id: ID of the recovery event     update_recoveries_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put(recovery_id, update_mdas_recovery_request_v2, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: str
        :param update_mdas_recovery_request_v2: (required)
        :type update_mdas_recovery_request_v2: UpdateMDASRecoveryRequestV2
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put_with_http_info(recovery_id, update_mdas_recovery_request_v2, **kwargs)  # noqa: E501

    @validate_arguments
    def update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put_with_http_info(self, recovery_id : StrictStr, update_mdas_recovery_request_v2 : UpdateMDASRecoveryRequestV2, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Recovery  # noqa: E501

        PUT endpoint for updating an existing recovery event Args:     recovery_id: ID of the recovery event     update_recoveries_request: Recovery event data     recoveries_dao: RecoveriesDAO instance  Returns: None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put_with_http_info(recovery_id, update_mdas_recovery_request_v2, async_req=True)
        >>> result = thread.get()

        :param recovery_id: (required)
        :type recovery_id: str
        :param update_mdas_recovery_request_v2: (required)
        :type update_mdas_recovery_request_v2: UpdateMDASRecoveryRequestV2
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'recovery_id',
            'update_mdas_recovery_request_v2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_recovery_data_sci_mdas_v2_recoveries_recovery_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['recovery_id'] is not None:
            _path_params['recovery_id'] = _params['recovery_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_mdas_recovery_request_v2'] is not None:
            _body_params = _params['update_mdas_recovery_request_v2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/data-sci-mdas/v2/recoveries/{recovery_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
