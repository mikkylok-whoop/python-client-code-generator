from whoop_service_clients.base.client import BaseApiClient
from datadog import DogStatsd
from datetime import datetime
from typing import List, Dict, Any, Optional, Union


{{#operations}}
class {{classname}}(BaseApiClient):
    def __init__(
        self,
        uri: str,
        api_token: str = None,
        timeout: int = None,
        statsd_client: DogStatsd = None,
        max_requests_per_connection: int = None,
        retry_count: int = 0,
    ) -> None:
        self._uri = uri
        super().__init__(
            service_uri=self._uri,
            api_token=api_token,
            timeout=timeout,
            statsd_client=statsd_client,
            max_requests_per_connection=max_requests_per_connection,
            retry_count=retry_count,
        )
{{#operation}}

    def {{operationId}}(self, {{#allParams}}{{paramName}}{{^required}} = None{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) -> {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}:
        """{{#isDeprecated}}(Deprecated) {{/isDeprecated}}
{{#notes}}
        {{{.}}}
{{/notes}}
        """
        # Process query parameters
        _query_params = []
{{#queryParams}}
        if {{paramName}} is not None:
            {{#isDateTime}}
            if isinstance({{paramName}}, datetime):
                _query_params.append(('{{baseName}}', {{paramName}}.strftime(self.format_datetime)))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDateTime}}
            {{^isDateTime}}
            {{#isDate}}
            if isinstance({{paramName}}, date):
                _query_params.append(('{{baseName}}', {{paramName}}.strftime(self.format_datetime)))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDate}}
            {{^isDate}}
            _query_params.append(('{{baseName}}', {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}))
            {{/isDate}}
            {{/isDateTime}}
{{/queryParams}}

        # Process body parameter
        _body_params = None
{{#bodyParam}}
        if {{paramName}} is not None:
            _body_params = {{paramName}}
{{/bodyParam}}

        # Construct request URL
        request_url = f"{self._uri}{{{path}}}"

        # HTTP method selection based on the operation
        {{#httpMethod}}
        {{#lambda.lowercase}}
        return self._{{.}}(
            url=request_url,
            return_type={{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}None{{/returnType}},
            query_params=_query_params,
            data=_body_params,
        )
        {{/lambda.lowercase}}
        {{/httpMethod}}

{{/operation}}
{{/operations}}