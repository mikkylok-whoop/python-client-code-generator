from whoop_service_clients.base.client import BaseApiClient
from datadog import DogStatsd
from typing import Optional

{{#imports}}
{{import}}
{{/imports}}


{{#operations}}
class {{classname}}(BaseApiClient):
    def __init__(self, uri: str, statsd_client: Optional[DogStatsd] = None) -> None:
        self._uri = uri
        super().__init__(service_uri=self._uri, statsd_client=statsd_client)
{{#operation}}

    def {{operationId}}(self, {{#allParams}}{{paramName}}: {{#isBodyParam}}{{dataType}}{{/isBodyParam}}{{^isBodyParam}}{{#isQueryParam}}{{#isDateTime}}datetime{{/isDateTime}}{{^isDateTime}}{{#isDate}}date{{/isDate}}{{^isDate}}{{dataType}}{{/isDate}}{{/isDateTime}}{{/isQueryParam}}{{^isQueryParam}}{{dataType}}{{/isQueryParam}}{{/isBodyParam}}{{^required}} = None{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) -> {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}:
        """{{#isDeprecated}}(Deprecated) {{/isDeprecated}}
{{#notes}}
        {{{.}}}
{{/notes}}
        """
        # Process query parameters
        _query_params: list[tuple[str, Any]] = []
{{#queryParams}}
        if {{paramName}} is not None:
            {{#isDateTime}}
            if isinstance({{paramName}}, datetime):
                _query_params.append(('{{baseName}}', self.format_datetime({{paramName}})))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDateTime}}
            {{^isDateTime}}
            {{#isDate}}
            if isinstance({{paramName}}, date):
                _query_params.append(('{{baseName}}', self.format_datetime({{paramName}})))
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDate}}
            {{^isDate}}
            _query_params.append(('{{baseName}}', {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}))
            {{/isDate}}
            {{/isDateTime}}
{{/queryParams}}

        # Process body parameter
        _body_params = None
{{#bodyParam}}
        if {{paramName}} is not None:
            _body_params = {{paramName}}
{{/bodyParam}}

        # Construct request URL
        request_url = f"{self._uri}{{{path}}}"

        # HTTP method selection based on the operation
        {{#httpMethod}}
        return self._{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(
            url=request_url,
            return_type={{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}},
            query_params=_query_params,
            data=_body_params,
        )
        {{/httpMethod}}
{{/operation}}
{{/operations}}